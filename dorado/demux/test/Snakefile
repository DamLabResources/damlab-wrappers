
# Get the directory of the current Snakefile
TEST_ROOT_dorado__demux = Path(workflow.snakefile).parent

rule test_dorado__demux__all:
    input:
        files = [TEST_ROOT_dorado__demux/"test_bam/sample3.bam",
                TEST_ROOT_dorado__demux/"test_bam/sample5.bam",
                TEST_ROOT_dorado__demux/"test_bam/missing.bam",
                TEST_ROOT_dorado__demux/"test_fastq/sample3.fastq",
                TEST_ROOT_dorado__demux/"test_fastq/sample5.fastq",
                TEST_ROOT_dorado__demux/"test_fastq/missing.fastq",
                ],
        tests = [TEST_ROOT_dorado__demux/"tests.py"]
    conda: 'env.yaml'
    log: 
        stdout = TEST_ROOT_dorado__demux/"test_output/pytest.stdout.log",
        stderr = TEST_ROOT_dorado__demux/"test_output/pytest.stderr.log"
    shell: "cd {TEST_ROOT_dorado__demux} && pytest {input.tests} > {log.stdout} 2> {log.stderr}"


rule test_dorado__demux__bam:
    input:
        reads = TEST_ROOT_dorado__demux/'basecalled.bam'
    output:
        directory(TEST_ROOT_dorado__demux/"test_bam")
    params:
        kit_name = "SQK-NBD114-24",
        barcode_to_output = {
            "barcode03": "sample3.bam",  # maps to sample3.bam
            "barcode05": "sample5.bam",  # maps to sample5.bam
            "barcode99": "missing.bam"   # should create empty file
        }
    threads: 2
    wrapper:
        f"file:{TEST_ROOT_dorado__demux.parent}"

rule test_dorado__demux__fastq:
    input:
        reads = TEST_ROOT_dorado__demux/'basecalled.bam'
    output:
        directory(TEST_ROOT_dorado__demux/"test_fastq")
    params:
        kit_name = "SQK-NBD114-24",
        emit_fastq = True,
        barcode_to_output = {
            "barcode03": "sample3.fastq",  # maps to sample3.fastq
            "barcode05": "sample5.fastq",  # maps to sample5.fastq
            "barcode99": "missing.fastq"   # should create empty file
        }
    threads: 2
    wrapper:
        f"file:{TEST_ROOT_dorado__demux.parent}"
