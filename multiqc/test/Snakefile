from os.path import join

SAMPLES = ["sample1", "sample2", "sample3"]
REGIONS = ["gag", "pol"]


rule all:
    input:
        "build/multiqc/multiqc_report.html",
        "build/multiqc/multiqc_report_data/multiqc_general_stats.txt"
    conda: "env.yaml"
    shell:
        "pytest tests.py"


rule multiqc:
    input:
        expand("build/strainline/{sample}.strainline.yaml", sample=SAMPLES),
        expand("build/dorado/{sample}.dorado.yaml", sample=SAMPLES),
        expand("build/hivmetrics/{sample}.hivmetrics.yaml", sample=SAMPLES),
        expand("build/deletion_frequency/{sample}.p24.deletion_frequency.yaml", sample=SAMPLES),
        expand("build/deletion_frequency/{sample}.vpr.deletion_frequency.yaml", sample=SAMPLES),
        expand("build/generic/{sample}.generic.yaml", sample=SAMPLES),
        expand("build/primercheck/{sample}.primercheck.yaml", sample=SAMPLES),
        expand("build/hivbert/{sample}.hivbert.yaml", sample=SAMPLES),
        expand("build/intactness/{sample}.intactness.yaml", sample=SAMPLES),
        expand("build/slice/{sample}.{region}.metrics.yaml", sample=SAMPLES, region=REGIONS)
    output:
        report = "build/multiqc/multiqc_report.html",
        data = "build/multiqc/multiqc_report_data/multiqc_general_stats.txt"
    params:
        prefix = "../venv",
        extra_args = "-v -f"
    wrapper:
        "file:../multiqc"

rule hivbert_mqc:
    input:
        "data/{sample}_v3.fasta"
    output:
        results = "build/hivbert/{sample}.results.csv",
        metrics = "build/hivbert/{sample}.hivbert.yaml"
    params:
        model_name = "damlab/HIV_V3_coreceptor",
        model_directory = "model_cache",
        sample_name = lambda wildcards: wildcards.sample
    log:
        "build/hivbert/{sample}.log"
    wrapper:
        "file:../../huggingface/hiv-bert"

rule strainline_mqc:
    input:
        "strainline/{sample}/haplotypes.final.fa",
    output:
        "build/strainline/{sample}.strainline.yaml"
    params:
        sample_name = lambda wildcards: wildcards.sample
    wrapper:
        "file:../strainline"


rule dorado_mqc:
    input:
        "dorado/{sample}.bam"
    output:
        "build/dorado/{sample}.dorado.yaml"
    params:
        sample_name = lambda wildcards: wildcards.sample
    wrapper:
        "file:../dorado"

rule hivmetrics_mqc:
    input:
        "build/hivreads/{sample}.sam"
    output:
        "build/hivmetrics/{sample}.hivmetrics.yaml"
    params:
        sample_name = lambda wildcards: wildcards.sample
    wrapper:
        "file:../hivmetrics"

def sample2seed(sample):
    return int(sample[-1])

rule:
    input:
        "../../cigarmath/test_data/test.sam"
    params:
        # Downsample to a random 80% of the reads
        extra = lambda wildcards: f'-s {sample2seed(wildcards.sample)}.8 -h' 
    output:
        temp("build/hivreads/{sample}.sam")
    wrapper:
        "v5.8.0/bio/samtools/view"

rule:
    input:
        "build/hivreads/{sample}.sam"
    params:
        # Sort by name
        extra = '-n'
    output:
        temp("build/deletion_frequency/{sample}.bam")
    wrapper:
        "v5.8.0/bio/samtools/sort"


rule deletion_frequency_A_mqc:
    input:
        "build/deletion_frequency/{sample}.bam"
    output:
        "build/deletion_frequency/{sample}.p24.deletion_frequency.yaml"
    params:
        required_region = "HXB2F:1000-7000",
        deletion_region = "HXB2F:1186-1879",
        sample_name = lambda wildcards: wildcards.sample,
        region_name = "p24"
    wrapper:
        "file:../../cigarmath/deletion_frequency"

rule deletion_frequency_B_mqc:
    input:
        "build/deletion_frequency/{sample}.bam"
    output:
        "build/deletion_frequency/{sample}.vpr.deletion_frequency.yaml"
    params:
        required_region = "HXB2F:1000-7000",
        deletion_region = "HXB2F:6262-6310",
        sample_name = lambda wildcards: wildcards.sample,
        region_name = "vpr"
    wrapper:
        "file:../../cigarmath/deletion_frequency"

rule convert_to_bam:
    input:
        "{tool}/{sample}.sam"
    output:
        temp("{tool}/{sample}.bam")
    wrapper:
        "v5.8.0/bio/samtools/view"

rule generic_mqc:
    output:
        "build/generic/{sample}.generic.yaml"
    params:
        sample_name = lambda wildcards: wildcards.sample,
        gel_band = lambda wildcards: "yes" if wildcards.sample in ["sample1", "sample2"] else "no"
    wrapper:
        "file:../generic"

rule primercheck_mqc:
    input:
        reads = "data/seqs_{sample}.fa",
        primers = "data/primers.tsv"
    output:
        csv = "build/primercheck/{sample}.results.csv",
        summary = "build/primercheck/{sample}.primercheck.yaml"
    params:
        sample_name = lambda wildcards: wildcards.sample,
    log:
        "build/primercheck/{sample}.log"
    wrapper:
        "file:../../seqkit/primercheck"

rule intactness_mqc:
    input:
        "intactness/{sample}.fasta"
    output:
        "build/intactness/{sample}.intactness.yaml"
    params:
        min_countable=50,
        max_countable=80,
        min_intact=70,
        max_intact=75,
        sample_name=lambda wildcards: wildcards.sample
    wrapper:
        "file:../../hiv/intactness"

# New rules for slice testing

rule convert_sam_to_bam:
    input:
        "data/slice/{sample}.sam"
    output:
        temp("build/slice/{sample}.bam")
    wrapper:
        "v5.8.0/bio/samtools/view"

rule slice_gag_region:
    input:
        "build/slice/{sample}.bam"
    output:
        fastq="build/slice/{sample}.gag.fastq",
        metrics="build/slice/{sample}.gag.metrics.yaml"
    params:
        region="HXB2:100-200",
        region_name="gag",
        sample_name=lambda wildcards: wildcards.sample,
        min_mapq=20
    wrapper:
        "file:../../cigarmath/slice"

rule slice_pol_region:
    input:
        "build/slice/{sample}.bam"
    output:
        fastq="build/slice/{sample}.pol.fastq",
        metrics="build/slice/{sample}.pol.metrics.yaml"
    params:
        region="HXB2:200-300",
        region_name="pol",
        sample_name=lambda wildcards: wildcards.sample,
        min_mapq=20
    wrapper:
        "file:../../cigarmath/slice"
    