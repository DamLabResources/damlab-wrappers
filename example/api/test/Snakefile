# Get the directory of the current Snakefile
TEST_ROOT_example__api = Path(workflow.snakefile).parent

# Use {group}__{tool}__ as a prefix to keep rules distinct
# Place output & log files in test_ directories to ensure they're not added to git

rule test_example__api__all:
    input:
        files = [TEST_ROOT_example__api/"test_output/basic.fasta",
                TEST_ROOT_example__api/"test_output/frame1.fasta",],
        tests = [TEST_ROOT_example__api/"tests.py"]
    conda: "env.yaml"
    log: 
        stdout = TEST_ROOT_example__api/"test_output/pytest.stdout.log",
        stderr = TEST_ROOT_example__api/"test_output/pytest.stderr.log"
    shell: "cd {TEST_ROOT_example__api} && pytest {input.tests} > {log.stdout} 2> {log.stderr}"

# Test with basic parameters
rule example__api__basic:
    input:
        TEST_ROOT_example__api/"test_data.fasta"
    output:
        TEST_ROOT_example__api/"test_output/basic.fasta"
    params:
        frame=0,
        table=1,
        stop_symbol="*",
        to_stop=False,
        cds=False
    log:
        TEST_ROOT_example__api/"test_output/basic.log"
    wrapper:
        f"file:{TEST_ROOT_example__api.parent}"

# Test with frame 1
rule example__api__frame1:
    input:
        TEST_ROOT_example__api/"test_data.fasta"
    output:
        TEST_ROOT_example__api/"test_output/frame1.fasta"
    params:
        frame=1,
        table=1,
        stop_symbol="*",
        to_stop=False,
        cds=False
    log:
        TEST_ROOT_example__api/"test_output/frame1.log"
    wrapper:
        f"file:{TEST_ROOT_example__api.parent}"
