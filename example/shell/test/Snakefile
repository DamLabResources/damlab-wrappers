from pathlib import Path

print(workflow.source_path('.'))
# Get the directory of the current Snakefile
TEST_ROOT = Path(workflow.snakefile).parent

# Use {group}__{tool}__ as a prefix to keep rules distinct
# Place output & log files in test_ directories to ensure they're not added to git

# One rule to collect all test files
rule test_example__shell__all:
    input:
        files = [TEST_ROOT/"test_output/basic.fasta",
                TEST_ROOT/"test_output/frame2.fasta",
                TEST_ROOT/"test_output/table2.fasta"],
        tests = [TEST_ROOT/"tests.py"]
    conda: "env.yaml"
    log: TEST_ROOT/"test_output/pytest.log"
    shell: "cd {TEST_ROOT} && pytest {input.tests}"

# Test with basic parameters
rule example__shell__test_basic:
    input:
        TEST_ROOT/"test_data.fasta"
    output:
        TEST_ROOT/"test_output/basic.fasta"
    log: TEST_ROOT/"test_output/basic.log"
    params:
        frame=1,
        table=1,
        trim=False
    wrapper:
        f"file:{TEST_ROOT.parent}"

# Test with frame 2
rule example__shell__test_frame2:
    input:
        TEST_ROOT/"test_data.fasta"
    output:
        TEST_ROOT/"test_output/frame2.fasta"
    log: TEST_ROOT/"test_output/frame2.log"
    params:
        frame=2,
        table=1,
        trim=False
    wrapper:
        f"file:{TEST_ROOT.parent}"

# Test with table 2 (vertebrate mitochondrial)
rule example__shell__test_table2:
    input:
        TEST_ROOT/"test_data.fasta"
    output:
        TEST_ROOT/"test_output/table2.fasta"
    log: TEST_ROOT/"test_output/table2.log"
    params:
        frame=1,
        table=2,
        trim=False
    wrapper:
        f"file:{TEST_ROOT.parent}"
